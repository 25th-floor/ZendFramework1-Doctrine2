<?php

namespace Core\Application;

class Bootstrap extends \Zend_Application_Bootstrap_Bootstrap
{
    public function _initConfig()
    {
        $config = new \Zend_Config($this->getApplication()->getOptions(), true);

        // Required: Boostrap requires this Registry entry
        \Zend_Registry::set('config', $config);

        return $config;
    }
    
    public function _initAutoloaderNamespaces()
    {
        require_once APPLICATION_PATH . '/../library/Doctrine/Common/ClassLoader.php';

        $autoloader = \Zend_Loader_Autoloader::getInstance();

        $coreAutoloader = new \Doctrine\Common\ClassLoader('Core');
        $autoloader->pushAutoloader(array($coreAutoloader, 'loadClass'), 'Core');

        $tpAutoloader = new \Doctrine\Common\ClassLoader('TP');
        $autoloader->pushAutoloader(array($tpAutoloader, 'loadClass'), 'TP');
    }

    public function _initRouter()
    {
        $this->bootstrap('doctrine');

        $config = $this->getOptions();
        $config = $config['routes'];

        $container = \Zend_Registry::get('doctrine');
        $cache = $container->getCacheInstance($config['cache']);

        $frontController = \Zend_Controller_Front::getInstance();

        //if(($router = $cache->fetch('router')) === false) {
            // Load up .ini file and put the results in the cache
            $routes = new \Zend_Config_Ini($config['path'], \APPLICATION_ENV);
            $router = $frontController->getRouter();
            $router->addConfig($routes, 'routes');

            $cache->save('routes', $router);
        //} else {
            // Use cached version
        //    $frontController->setRouter($router);
        //}
    }
}